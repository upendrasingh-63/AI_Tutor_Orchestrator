
# This file defines the Pydantic models for the inputs and outputs of each educational tool.
# UPDATED: Added explicit `title` to each input schema's config to ensure the LLM
# returns the exact tool name we expect for validation.

from pydantic import BaseModel, Field, ConfigDict
from typing import List, Literal, Optional

# --- Common Reusable Models ---
class UserInfo(BaseModel):
    """Consistent student profile information required by all tools."""
    user_id: str = Field(..., description="Unique identifier for the student")
    name: str = Field(..., description="Student's full name")
    grade_level: str = Field(..., description="Student's current grade level")
    learning_style_summary: str = Field(..., description="Summary of student's preferred learning style")
    emotional_state_summary: str = Field(..., description="Current emotional state of the student")
    mastery_level_summary: str = Field(..., description="Current mastery level description")

class ChatMessage(BaseModel):
    """Represents a single message in the conversation history."""
    role: Literal['user', 'assistant']
    content: str

class ToolCallRequest(BaseModel):
    """Represents a request to call a tool, generated by the LLM."""
    tool_name: str
    parameters: dict

# --- Tool-Specific Input Schemas ---

class NoteMakerInput(BaseModel):
    """Input schema for the Note Maker Tool."""
    # This title is crucial. It MUST match the tool name in tool_definitions.py
    model_config = ConfigDict(json_schema_extra={"title": "NoteMakerTool"})

    user_info: UserInfo
    chat_history: List[ChatMessage]
    topic: str = Field(..., description="The main topic for note generation, e.g., 'Water Cycle'")
    subject: str = Field(..., description="Academic subject area, e.g., 'Environmental Science'")
    note_taking_style: Literal['outline', 'bullet_points', 'narrative', 'structured']
    include_examples: Optional[bool] = Field(True, description="Whether to include examples in the notes")
    include_analogies: Optional[bool] = Field(False, description="Whether to include analogies in the notes")


class FlashcardGeneratorInput(BaseModel):
    """Input schema for the Flashcard Generator Tool."""
    # This title is crucial. It MUST match the tool name in tool_definitions.py
    model_config = ConfigDict(json_schema_extra={"title": "FlashcardGeneratorTool"})

    user_info: UserInfo
    topic: str = Field(..., description="The topic for flashcard generation, e.g., 'Photosynthesis'")
    count: int = Field(..., description="Number of flashcards to generate", ge=1, le=20)
    difficulty: Literal['easy', 'medium', 'hard']
    subject: str = Field(..., description="Academic subject area, e.g., 'Biology'")
    include_examples: Optional[bool] = Field(True, description="Whether to include examples in flashcards")


class ConceptExplainerInput(BaseModel):
    """Input schema for the Concept Explainer Tool."""
    # This title is crucial. It MUST match the tool name in tool_definitions.py
    model_config = ConfigDict(json_schema_extra={"title": "ConceptExplainerTool"})

    user_info: UserInfo
    chat_history: List[ChatMessage]
    concept_to_explain: str = Field(..., description="The specific concept to explain, e.g., 'photosynthesis'")
    current_topic: str = Field(..., description="Broader topic context, e.g., 'biology'")
    desired_depth: Literal['basic', 'intermediate', 'advanced', 'comprehensive']

